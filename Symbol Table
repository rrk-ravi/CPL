#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TABLE_SIZE 100

typedef struct Entry {
    char* key;
    int value;
    struct Entry* next;
} Entry;

typedef struct {
    Entry* entries[TABLE_SIZE];
} HashTable;

typedef struct Node {
    int level;
    struct Node* next;
    HashTable* ht;
} Node;

void initialiseHashTable(HashTable* ht) {
    for (int i = 0; i < TABLE_SIZE; i++) {
        ht->entries[i] = NULL;
    }
}

int hash(char* key) {
    int sum = 0;
    for (int i = 0; key[i] != '\0'; i++) {
        sum += key[i];
    }
    return sum % TABLE_SIZE;
}

Node* begin(Node* head, int level) {
    Node* new_node = (Node*)malloc(sizeof(Node));
    new_node->level = level;
    new_node->next = head;
    new_node->ht = (HashTable*)malloc(sizeof(HashTable));
    initialiseHashTable(new_node->ht);
    return new_node;
}

Node* end(Node* head) {
    Node* temp = head;
    head = head->next;
    free(temp->ht);
    free(temp);
    return head;
}

void assign(char* key, char* val, Node* head) {
    int index = hash(key);
    int value = atoi(val);

    Entry* new_entry = (Entry*)malloc(sizeof(Entry));
    new_entry->key = strdup(key);
    new_entry->value = value;
    // new_entry->next = NULL;

    new_entry->next = head->ht->entries[index];
    head->ht->entries[index] = new_entry;
}

void print(char* key, Node* head) {
    Node* temp = head;

    while (temp != NULL) {
        int index = hash(key);
        Entry* current_entry = temp->ht->entries[index];
        while (current_entry != NULL) {
            if (strcmp(current_entry->key, key) == 0) {
                printf("%d\n", current_entry->value);
                return;
            }
            current_entry = current_entry->next;
        }
        temp = temp->next;
    }

    printf("No such variable\n");
}

int main() {
    Node* head = NULL;
    int level = 0;
    FILE* iptr;
    iptr = fopen("items.txt", "r");
    if (iptr == NULL) {
        printf("Error opening file iptr\n");
        exit(1);
    }
    char line[100];
    fscanf(iptr, "%s", line);
    do {
        if (strcmp(line, "begin") == 0) {
            level++;
            head = begin(head, level);
        }
        else if (strcmp(line, "end") == 0) {
            head = end(head);
            level--;
        } 
        else if (strcmp(line, "assign") == 0) {
            char name[100];
            char value[20];
            fscanf(iptr, "%s %s", name, value);
            assign(name, value, head);
        } 
        else if (strcmp(line, "print") == 0) {
            char name[100];
            fscanf(iptr, "%s", name);
            print(name, head);
        }
    } while (fscanf(iptr, "%s", line) == 1 && level > 0);

    fclose(iptr);
   return 0;
}
